Terminals unused in grammar

    '?'
    ':'
    '%'


State 13 conflicts: 7 shift/reduce
State 46 conflicts: 2 shift/reduce
State 99 conflicts: 2 shift/reduce
State 100 conflicts: 2 shift/reduce
State 140 conflicts: 2 reduce/reduce


Grammar

    0 $accept: s $end

    1 s: cmds

    2 cmds: cmd_1 separador cmds
    3     | cmd_2 cmds
    4     | %empty

    5 cmd_1: atr
    6      | LET decl
    7      | VAR decl
    8      | CONST decl
    9      | loop
   10      | exp ASM
   11      | RETURN
   12      | RETURN exp

   13 cmd_2: condicional
   14      | funcao

   15 funcao: FUNCTION ID empilha_escopo_func '(' args ')' corpo desempilha_escopo_func
   16       | FUNCTION ID empilha_escopo_func '(' ')' corpo desempilha_escopo_func

   17 args: args ',' arg
   18     | arg

   19 arg: ID
   20    | ID '=' exp
   21    | exp

   22 empilha_escopo_func: empilha_escopo

   23 desempilha_escopo_func: desempilha_escopo

   24 empilha_escopo: %empty

   25 desempilha_escopo: %empty

   26 atr: atr_id
   27    | atr_obj
   28    | atr_array

   29 atr_id: ID '=' exp
   30       | ID '=' atr_recursiva
   31       | ID ADD exp

   32 atr_recursiva: ID '=' exp
   33              | ID '=' atr_recursiva

   34 atr_obj: ID '.' prop '=' exp
   35        | ID '.' prop ADD exp

   36 prop: ID
   37     | ID '[' exp ']'

   38 atr_array: ID indices '=' rec
   39          | ID '[' atr ']' '=' exp

   40 rec: exp
   41    | matexp
   42    | exp '=' rec
   43    | atr_array

   44 matexp: matrix
   45       | matexp '*' matexp
   46       | matexp '+' matexp

   47 matrix: ID indices

   48 indices: '[' exp ']' indices
   49        | '[' exp ']'

   50 decl: ID '=' exp fim_decl
   51     | ID fim_decl

   52 fim_decl: ',' decl
   53         | %empty

   54 loop: while_loop
   55     | for_loop

   56 separador: separador ';'
   57          | %empty

   58 while_loop: WHILE '(' condicao ')' corpo

   59 for_loop: FOR '(' LET decl ';' condicao ';' atr ')' corpo
   60         | FOR '(' atr ';' condicao ';' atr ')' corpo

   61 condicional: IF '(' condicao ')' corpo ELSE corpo
   62            | IF '(' condicao ')' corpo

   63 corpo: '{' cmds '}'
   64      | cmd_1 ';'
   65      | cmd_2

   66 condicao: exp '>' exp
   67         | exp '<' exp
   68         | exp IGUAL exp
   69         | exp DIF exp
   70         | exp

   71 exp: exp '+' exp
   72    | exp '-' exp
   73    | exp '*' exp
   74    | exp '/' exp
   75    | ID '.' ID
   76    | val
   77    | exp '(' params ')'

   78 params: exp ',' params
   79       | exp
   80       | %empty

   81 val: ID
   82    | NUM
   83    | '-' NUM
   84    | '(' exp ')'
   85    | OBJ
   86    | ARRAY
   87    | STRING
   88    | ID INC


Terminals, with rules where they appear

    $end (0) 0
    '%' (37)
    '(' (40) 15 16 58 59 60 61 62 77 84
    ')' (41) 15 16 58 59 60 61 62 77 84
    '*' (42) 45 73
    '+' (43) 46 71
    ',' (44) 17 52 78
    '-' (45) 72 83
    '.' (46) 34 35 75
    '/' (47) 74
    ':' (58)
    ';' (59) 56 59 60 64
    '<' (60) 67
    '=' (61) 20 29 30 32 33 34 38 39 42 50
    '>' (62) 66
    '?' (63)
    'T' (84)
    '[' (91) 37 39 48 49
    ']' (93) 37 39 48 49
    '{' (123) 63
    '}' (125) 63
    error (256)
    NUM (258) 82 83
    ID (259) 15 16 19 20 29 30 31 32 33 34 35 36 37 38 39 47 50 51 75 81 88
    LET (260) 6 59
    VAR (261) 7
    CONST (262) 8
    OBJ (263) 85
    ARRAY (264) 86
    STRING (265) 87
    ADD (266) 31 35
    IF (267) 61 62
    ELSE (268) 61
    IGUAL (269) 68
    DIF (270) 69
    INC (271) 88
    WHILE (272) 58
    FOR (273) 59 60
    FUNCTION (274) 15 16
    ASM (275) 10
    RETURN (276) 11 12


Nonterminals, with rules where they appear

    $accept (42)
        on left: 0
    s (43)
        on left: 1
        on right: 0
    cmds (44)
        on left: 2 3 4
        on right: 1 2 3 63
    cmd_1 (45)
        on left: 5 6 7 8 9 10 11 12
        on right: 2 64
    cmd_2 (46)
        on left: 13 14
        on right: 3 65
    funcao (47)
        on left: 15 16
        on right: 14
    args (48)
        on left: 17 18
        on right: 15 17
    arg (49)
        on left: 19 20 21
        on right: 17 18
    empilha_escopo_func (50)
        on left: 22
        on right: 15 16
    desempilha_escopo_func (51)
        on left: 23
        on right: 15 16
    empilha_escopo (52)
        on left: 24
        on right: 22
    desempilha_escopo (53)
        on left: 25
        on right: 23
    atr (54)
        on left: 26 27 28
        on right: 5 39 59 60
    atr_id (55)
        on left: 29 30 31
        on right: 26
    atr_recursiva (56)
        on left: 32 33
        on right: 30 33
    atr_obj (57)
        on left: 34 35
        on right: 27
    prop (58)
        on left: 36 37
        on right: 34 35
    atr_array (59)
        on left: 38 39
        on right: 28 43
    rec (60)
        on left: 40 41 42 43
        on right: 38 42
    matexp (61)
        on left: 44 45 46
        on right: 41 45 46
    matrix (62)
        on left: 47
        on right: 44
    indices (63)
        on left: 48 49
        on right: 38 47 48
    decl (64)
        on left: 50 51
        on right: 6 7 8 52 59
    fim_decl (65)
        on left: 52 53
        on right: 50 51
    loop (66)
        on left: 54 55
        on right: 9
    separador (67)
        on left: 56 57
        on right: 2 56
    while_loop (68)
        on left: 58
        on right: 54
    for_loop (69)
        on left: 59 60
        on right: 55
    condicional (70)
        on left: 61 62
        on right: 13
    corpo (71)
        on left: 63 64 65
        on right: 15 16 58 59 60 61 62
    condicao (72)
        on left: 66 67 68 69 70
        on right: 58 59 60 61 62
    exp (73)
        on left: 71 72 73 74 75 76 77
        on right: 10 12 20 21 29 31 32 34 35 37 39 40 42 48 49 50 66 67 68 69 70 71 72 73 74 77 78 79 84
    params (74)
        on left: 78 79 80
        on right: 77 78
    val (75)
        on left: 81 82 83 84 85 86 87 88
        on right: 76


State 0

    0 $accept: . s $end

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    $default  reduce using rule 4 (cmds)

    s            go to state 16
    cmds         go to state 17
    cmd_1        go to state 18
    cmd_2        go to state 19
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    exp          go to state 29
    val          go to state 30


State 1

   82 val: NUM .

    $default  reduce using rule 82 (val)


State 2

   29 atr_id: ID . '=' exp
   30       | ID . '=' atr_recursiva
   31       | ID . ADD exp
   34 atr_obj: ID . '.' prop '=' exp
   35        | ID . '.' prop ADD exp
   38 atr_array: ID . indices '=' rec
   39          | ID . '[' atr ']' '=' exp
   75 exp: ID . '.' ID
   81 val: ID .
   88    | ID . INC

    ADD  shift, and go to state 31
    INC  shift, and go to state 32
    '='  shift, and go to state 33
    '.'  shift, and go to state 34
    '['  shift, and go to state 35

    $default  reduce using rule 81 (val)

    indices  go to state 36


State 3

    6 cmd_1: LET . decl

    ID  shift, and go to state 37

    decl  go to state 38


State 4

    7 cmd_1: VAR . decl

    ID  shift, and go to state 37

    decl  go to state 39


State 5

    8 cmd_1: CONST . decl

    ID  shift, and go to state 37

    decl  go to state 40


State 6

   85 val: OBJ .

    $default  reduce using rule 85 (val)


State 7

   86 val: ARRAY .

    $default  reduce using rule 86 (val)


State 8

   87 val: STRING .

    $default  reduce using rule 87 (val)


State 9

   61 condicional: IF . '(' condicao ')' corpo ELSE corpo
   62            | IF . '(' condicao ')' corpo

    '('  shift, and go to state 41


State 10

   58 while_loop: WHILE . '(' condicao ')' corpo

    '('  shift, and go to state 42


State 11

   59 for_loop: FOR . '(' LET decl ';' condicao ';' atr ')' corpo
   60         | FOR . '(' atr ';' condicao ';' atr ')' corpo

    '('  shift, and go to state 43


State 12

   15 funcao: FUNCTION . ID empilha_escopo_func '(' args ')' corpo desempilha_escopo_func
   16       | FUNCTION . ID empilha_escopo_func '(' ')' corpo desempilha_escopo_func

    ID  shift, and go to state 44


State 13

   11 cmd_1: RETURN .
   12      | RETURN . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    NUM       [reduce using rule 11 (cmd_1)]
    ID        [reduce using rule 11 (cmd_1)]
    OBJ       [reduce using rule 11 (cmd_1)]
    ARRAY     [reduce using rule 11 (cmd_1)]
    STRING    [reduce using rule 11 (cmd_1)]
    '-'       [reduce using rule 11 (cmd_1)]
    '('       [reduce using rule 11 (cmd_1)]
    $default  reduce using rule 11 (cmd_1)

    exp  go to state 46
    val  go to state 30


State 14

   83 val: '-' . NUM

    NUM  shift, and go to state 47


State 15

   84 val: '(' . exp ')'

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 48
    val  go to state 30


State 16

    0 $accept: s . $end

    $end  shift, and go to state 49


State 17

    1 s: cmds .

    $default  reduce using rule 1 (s)


State 18

    2 cmds: cmd_1 . separador cmds

    $default  reduce using rule 57 (separador)

    separador  go to state 50


State 19

    3 cmds: cmd_2 . cmds

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    $default  reduce using rule 4 (cmds)

    cmds         go to state 51
    cmd_1        go to state 18
    cmd_2        go to state 19
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    exp          go to state 29
    val          go to state 30


State 20

   14 cmd_2: funcao .

    $default  reduce using rule 14 (cmd_2)


State 21

    5 cmd_1: atr .

    $default  reduce using rule 5 (cmd_1)


State 22

   26 atr: atr_id .

    $default  reduce using rule 26 (atr)


State 23

   27 atr: atr_obj .

    $default  reduce using rule 27 (atr)


State 24

   28 atr: atr_array .

    $default  reduce using rule 28 (atr)


State 25

    9 cmd_1: loop .

    $default  reduce using rule 9 (cmd_1)


State 26

   54 loop: while_loop .

    $default  reduce using rule 54 (loop)


State 27

   55 loop: for_loop .

    $default  reduce using rule 55 (loop)


State 28

   13 cmd_2: condicional .

    $default  reduce using rule 13 (cmd_2)


State 29

   10 cmd_1: exp . ASM
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    ASM  shift, and go to state 52
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57


State 30

   76 exp: val .

    $default  reduce using rule 76 (exp)


State 31

   31 atr_id: ID ADD . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 58
    val  go to state 30


State 32

   88 val: ID INC .

    $default  reduce using rule 88 (val)


State 33

   29 atr_id: ID '=' . exp
   30       | ID '=' . atr_recursiva

    NUM     shift, and go to state 1
    ID      shift, and go to state 59
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    atr_recursiva  go to state 60
    exp            go to state 61
    val            go to state 30


State 34

   34 atr_obj: ID '.' . prop '=' exp
   35        | ID '.' . prop ADD exp
   75 exp: ID '.' . ID

    ID  shift, and go to state 62

    prop  go to state 63


State 35

   39 atr_array: ID '[' . atr ']' '=' exp
   48 indices: '[' . exp ']' indices
   49        | '[' . exp ']'

    NUM     shift, and go to state 1
    ID      shift, and go to state 2
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    atr        go to state 64
    atr_id     go to state 22
    atr_obj    go to state 23
    atr_array  go to state 24
    exp        go to state 65
    val        go to state 30


State 36

   38 atr_array: ID indices . '=' rec

    '='  shift, and go to state 66


State 37

   50 decl: ID . '=' exp fim_decl
   51     | ID . fim_decl

    '='  shift, and go to state 67
    ','  shift, and go to state 68

    $default  reduce using rule 53 (fim_decl)

    fim_decl  go to state 69


State 38

    6 cmd_1: LET decl .

    $default  reduce using rule 6 (cmd_1)


State 39

    7 cmd_1: VAR decl .

    $default  reduce using rule 7 (cmd_1)


State 40

    8 cmd_1: CONST decl .

    $default  reduce using rule 8 (cmd_1)


State 41

   61 condicional: IF '(' . condicao ')' corpo ELSE corpo
   62            | IF '(' . condicao ')' corpo

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    condicao  go to state 70
    exp       go to state 71
    val       go to state 30


State 42

   58 while_loop: WHILE '(' . condicao ')' corpo

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    condicao  go to state 72
    exp       go to state 71
    val       go to state 30


State 43

   59 for_loop: FOR '(' . LET decl ';' condicao ';' atr ')' corpo
   60         | FOR '(' . atr ';' condicao ';' atr ')' corpo

    ID   shift, and go to state 73
    LET  shift, and go to state 74

    atr        go to state 75
    atr_id     go to state 22
    atr_obj    go to state 23
    atr_array  go to state 24


State 44

   15 funcao: FUNCTION ID . empilha_escopo_func '(' args ')' corpo desempilha_escopo_func
   16       | FUNCTION ID . empilha_escopo_func '(' ')' corpo desempilha_escopo_func

    $default  reduce using rule 24 (empilha_escopo)

    empilha_escopo_func  go to state 76
    empilha_escopo       go to state 77


State 45

   75 exp: ID . '.' ID
   81 val: ID .
   88    | ID . INC

    INC  shift, and go to state 32
    '.'  shift, and go to state 78

    $default  reduce using rule 81 (val)


State 46

   12 cmd_1: RETURN exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    '-'       [reduce using rule 12 (cmd_1)]
    '('       [reduce using rule 12 (cmd_1)]
    $default  reduce using rule 12 (cmd_1)


State 47

   83 val: '-' NUM .

    $default  reduce using rule 83 (val)


State 48

   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'
   84 val: '(' exp . ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57
    ')'  shift, and go to state 79


State 49

    0 $accept: s $end .

    $default  accept


State 50

    2 cmds: cmd_1 separador . cmds
   56 separador: separador . ';'

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    ';'       shift, and go to state 80

    $default  reduce using rule 4 (cmds)

    cmds         go to state 81
    cmd_1        go to state 18
    cmd_2        go to state 19
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    exp          go to state 29
    val          go to state 30


State 51

    3 cmds: cmd_2 cmds .

    $default  reduce using rule 3 (cmds)


State 52

   10 cmd_1: exp ASM .

    $default  reduce using rule 10 (cmd_1)


State 53

   71 exp: exp '+' . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 82
    val  go to state 30


State 54

   72 exp: exp '-' . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 83
    val  go to state 30


State 55

   73 exp: exp '*' . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 84
    val  go to state 30


State 56

   74 exp: exp '/' . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 85
    val  go to state 30


State 57

   77 exp: exp '(' . params ')'

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    $default  reduce using rule 80 (params)

    exp     go to state 86
    params  go to state 87
    val     go to state 30


State 58

   31 atr_id: ID ADD exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 31 (atr_id)


State 59

   32 atr_recursiva: ID . '=' exp
   33              | ID . '=' atr_recursiva
   75 exp: ID . '.' ID
   81 val: ID .
   88    | ID . INC

    INC  shift, and go to state 32
    '='  shift, and go to state 88
    '.'  shift, and go to state 78

    $default  reduce using rule 81 (val)


State 60

   30 atr_id: ID '=' atr_recursiva .

    $default  reduce using rule 30 (atr_id)


State 61

   29 atr_id: ID '=' exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 29 (atr_id)


State 62

   36 prop: ID .
   37     | ID . '[' exp ']'
   75 exp: ID '.' ID .

    '['  shift, and go to state 89

    ADD       reduce using rule 36 (prop)
    '='       reduce using rule 36 (prop)
    $default  reduce using rule 75 (exp)


State 63

   34 atr_obj: ID '.' prop . '=' exp
   35        | ID '.' prop . ADD exp

    ADD  shift, and go to state 90
    '='  shift, and go to state 91


State 64

   39 atr_array: ID '[' atr . ']' '=' exp

    ']'  shift, and go to state 92


State 65

   48 indices: '[' exp . ']' indices
   49        | '[' exp . ']'
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57
    ']'  shift, and go to state 93


State 66

   38 atr_array: ID indices '=' . rec

    NUM     shift, and go to state 1
    ID      shift, and go to state 94
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    atr_array  go to state 95
    rec        go to state 96
    matexp     go to state 97
    matrix     go to state 98
    exp        go to state 99
    val        go to state 30


State 67

   50 decl: ID '=' . exp fim_decl

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 100
    val  go to state 30


State 68

   52 fim_decl: ',' . decl

    ID  shift, and go to state 37

    decl  go to state 101


State 69

   51 decl: ID fim_decl .

    $default  reduce using rule 51 (decl)


State 70

   61 condicional: IF '(' condicao . ')' corpo ELSE corpo
   62            | IF '(' condicao . ')' corpo

    ')'  shift, and go to state 102


State 71

   66 condicao: exp . '>' exp
   67         | exp . '<' exp
   68         | exp . IGUAL exp
   69         | exp . DIF exp
   70         | exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    IGUAL  shift, and go to state 103
    DIF    shift, and go to state 104
    '+'    shift, and go to state 53
    '-'    shift, and go to state 54
    '*'    shift, and go to state 55
    '/'    shift, and go to state 56
    '('    shift, and go to state 57
    '>'    shift, and go to state 105
    '<'    shift, and go to state 106

    $default  reduce using rule 70 (condicao)


State 72

   58 while_loop: WHILE '(' condicao . ')' corpo

    ')'  shift, and go to state 107


State 73

   29 atr_id: ID . '=' exp
   30       | ID . '=' atr_recursiva
   31       | ID . ADD exp
   34 atr_obj: ID . '.' prop '=' exp
   35        | ID . '.' prop ADD exp
   38 atr_array: ID . indices '=' rec
   39          | ID . '[' atr ']' '=' exp

    ADD  shift, and go to state 31
    '='  shift, and go to state 33
    '.'  shift, and go to state 108
    '['  shift, and go to state 35

    indices  go to state 36


State 74

   59 for_loop: FOR '(' LET . decl ';' condicao ';' atr ')' corpo

    ID  shift, and go to state 37

    decl  go to state 109


State 75

   60 for_loop: FOR '(' atr . ';' condicao ';' atr ')' corpo

    ';'  shift, and go to state 110


State 76

   15 funcao: FUNCTION ID empilha_escopo_func . '(' args ')' corpo desempilha_escopo_func
   16       | FUNCTION ID empilha_escopo_func . '(' ')' corpo desempilha_escopo_func

    '('  shift, and go to state 111


State 77

   22 empilha_escopo_func: empilha_escopo .

    $default  reduce using rule 22 (empilha_escopo_func)


State 78

   75 exp: ID '.' . ID

    ID  shift, and go to state 112


State 79

   84 val: '(' exp ')' .

    $default  reduce using rule 84 (val)


State 80

   56 separador: separador ';' .

    $default  reduce using rule 56 (separador)


State 81

    2 cmds: cmd_1 separador cmds .

    $default  reduce using rule 2 (cmds)


State 82

   71 exp: exp . '+' exp
   71    | exp '+' exp .
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 71 (exp)


State 83

   71 exp: exp . '+' exp
   72    | exp . '-' exp
   72    | exp '-' exp .
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 72 (exp)


State 84

   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   73    | exp '*' exp .
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '('  shift, and go to state 57

    $default  reduce using rule 73 (exp)


State 85

   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   74    | exp '/' exp .
   77    | exp . '(' params ')'

    '('  shift, and go to state 57

    $default  reduce using rule 74 (exp)


State 86

   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'
   78 params: exp . ',' params
   79       | exp .

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57
    ','  shift, and go to state 113

    $default  reduce using rule 79 (params)


State 87

   77 exp: exp '(' params . ')'

    ')'  shift, and go to state 114


State 88

   32 atr_recursiva: ID '=' . exp
   33              | ID '=' . atr_recursiva

    NUM     shift, and go to state 1
    ID      shift, and go to state 59
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    atr_recursiva  go to state 115
    exp            go to state 116
    val            go to state 30


State 89

   37 prop: ID '[' . exp ']'

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 117
    val  go to state 30


State 90

   35 atr_obj: ID '.' prop ADD . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 118
    val  go to state 30


State 91

   34 atr_obj: ID '.' prop '=' . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 119
    val  go to state 30


State 92

   39 atr_array: ID '[' atr ']' . '=' exp

    '='  shift, and go to state 120


State 93

   48 indices: '[' exp ']' . indices
   49        | '[' exp ']' .

    '['  shift, and go to state 121

    $default  reduce using rule 49 (indices)

    indices  go to state 122


State 94

   38 atr_array: ID . indices '=' rec
   39          | ID . '[' atr ']' '=' exp
   47 matrix: ID . indices
   75 exp: ID . '.' ID
   81 val: ID .
   88    | ID . INC

    INC  shift, and go to state 32
    '.'  shift, and go to state 78
    '['  shift, and go to state 35

    $default  reduce using rule 81 (val)

    indices  go to state 123


State 95

   43 rec: atr_array .

    $default  reduce using rule 43 (rec)


State 96

   38 atr_array: ID indices '=' rec .

    $default  reduce using rule 38 (atr_array)


State 97

   41 rec: matexp .
   45 matexp: matexp . '*' matexp
   46       | matexp . '+' matexp

    '+'  shift, and go to state 124
    '*'  shift, and go to state 125

    $default  reduce using rule 41 (rec)


State 98

   44 matexp: matrix .

    $default  reduce using rule 44 (matexp)


State 99

   40 rec: exp .
   42    | exp . '=' rec
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '='  shift, and go to state 126
    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    '-'       [reduce using rule 40 (rec)]
    '('       [reduce using rule 40 (rec)]
    $default  reduce using rule 40 (rec)


State 100

   50 decl: ID '=' exp . fim_decl
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57
    ','  shift, and go to state 68

    '-'       [reduce using rule 53 (fim_decl)]
    '('       [reduce using rule 53 (fim_decl)]
    $default  reduce using rule 53 (fim_decl)

    fim_decl  go to state 127


State 101

   52 fim_decl: ',' decl .

    $default  reduce using rule 52 (fim_decl)


State 102

   61 condicional: IF '(' condicao ')' . corpo ELSE corpo
   62            | IF '(' condicao ')' . corpo

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 128

    cmd_1        go to state 129
    cmd_2        go to state 130
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    corpo        go to state 131
    exp          go to state 29
    val          go to state 30


State 103

   68 condicao: exp IGUAL . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 132
    val  go to state 30


State 104

   69 condicao: exp DIF . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 133
    val  go to state 30


State 105

   66 condicao: exp '>' . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 134
    val  go to state 30


State 106

   67 condicao: exp '<' . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 135
    val  go to state 30


State 107

   58 while_loop: WHILE '(' condicao ')' . corpo

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 128

    cmd_1        go to state 129
    cmd_2        go to state 130
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    corpo        go to state 136
    exp          go to state 29
    val          go to state 30


State 108

   34 atr_obj: ID '.' . prop '=' exp
   35        | ID '.' . prop ADD exp

    ID  shift, and go to state 137

    prop  go to state 63


State 109

   59 for_loop: FOR '(' LET decl . ';' condicao ';' atr ')' corpo

    ';'  shift, and go to state 138


State 110

   60 for_loop: FOR '(' atr ';' . condicao ';' atr ')' corpo

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    condicao  go to state 139
    exp       go to state 71
    val       go to state 30


State 111

   15 funcao: FUNCTION ID empilha_escopo_func '(' . args ')' corpo desempilha_escopo_func
   16       | FUNCTION ID empilha_escopo_func '(' . ')' corpo desempilha_escopo_func

    NUM     shift, and go to state 1
    ID      shift, and go to state 140
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15
    ')'     shift, and go to state 141

    args  go to state 142
    arg   go to state 143
    exp   go to state 144
    val   go to state 30


State 112

   75 exp: ID '.' ID .

    $default  reduce using rule 75 (exp)


State 113

   78 params: exp ',' . params

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    $default  reduce using rule 80 (params)

    exp     go to state 86
    params  go to state 145
    val     go to state 30


State 114

   77 exp: exp '(' params ')' .

    $default  reduce using rule 77 (exp)


State 115

   33 atr_recursiva: ID '=' atr_recursiva .

    $default  reduce using rule 33 (atr_recursiva)


State 116

   32 atr_recursiva: ID '=' exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 32 (atr_recursiva)


State 117

   37 prop: ID '[' exp . ']'
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57
    ']'  shift, and go to state 146


State 118

   35 atr_obj: ID '.' prop ADD exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 35 (atr_obj)


State 119

   34 atr_obj: ID '.' prop '=' exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 34 (atr_obj)


State 120

   39 atr_array: ID '[' atr ']' '=' . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 147
    val  go to state 30


State 121

   48 indices: '[' . exp ']' indices
   49        | '[' . exp ']'

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 65
    val  go to state 30


State 122

   48 indices: '[' exp ']' indices .

    $default  reduce using rule 48 (indices)


State 123

   38 atr_array: ID indices . '=' rec
   47 matrix: ID indices .

    '='  shift, and go to state 66

    $default  reduce using rule 47 (matrix)


State 124

   46 matexp: matexp '+' . matexp

    ID  shift, and go to state 148

    matexp  go to state 149
    matrix  go to state 98


State 125

   45 matexp: matexp '*' . matexp

    ID  shift, and go to state 148

    matexp  go to state 150
    matrix  go to state 98


State 126

   42 rec: exp '=' . rec

    NUM     shift, and go to state 1
    ID      shift, and go to state 94
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    atr_array  go to state 95
    rec        go to state 151
    matexp     go to state 97
    matrix     go to state 98
    exp        go to state 99
    val        go to state 30


State 127

   50 decl: ID '=' exp fim_decl .

    $default  reduce using rule 50 (decl)


State 128

   63 corpo: '{' . cmds '}'

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15

    $default  reduce using rule 4 (cmds)

    cmds         go to state 152
    cmd_1        go to state 18
    cmd_2        go to state 19
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    exp          go to state 29
    val          go to state 30


State 129

   64 corpo: cmd_1 . ';'

    ';'  shift, and go to state 153


State 130

   65 corpo: cmd_2 .

    $default  reduce using rule 65 (corpo)


State 131

   61 condicional: IF '(' condicao ')' corpo . ELSE corpo
   62            | IF '(' condicao ')' corpo .

    ELSE  shift, and go to state 154

    $default  reduce using rule 62 (condicional)


State 132

   68 condicao: exp IGUAL exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 68 (condicao)


State 133

   69 condicao: exp DIF exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 69 (condicao)


State 134

   66 condicao: exp '>' exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 66 (condicao)


State 135

   67 condicao: exp '<' exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 67 (condicao)


State 136

   58 while_loop: WHILE '(' condicao ')' corpo .

    $default  reduce using rule 58 (while_loop)


State 137

   36 prop: ID .
   37     | ID . '[' exp ']'

    '['  shift, and go to state 89

    $default  reduce using rule 36 (prop)


State 138

   59 for_loop: FOR '(' LET decl ';' . condicao ';' atr ')' corpo

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    condicao  go to state 155
    exp       go to state 71
    val       go to state 30


State 139

   60 for_loop: FOR '(' atr ';' condicao . ';' atr ')' corpo

    ';'  shift, and go to state 156


State 140

   19 arg: ID .
   20    | ID . '=' exp
   75 exp: ID . '.' ID
   81 val: ID .
   88    | ID . INC

    INC  shift, and go to state 32
    '='  shift, and go to state 157
    '.'  shift, and go to state 78

    ')'       reduce using rule 19 (arg)
    ')'       [reduce using rule 81 (val)]
    ','       reduce using rule 19 (arg)
    ','       [reduce using rule 81 (val)]
    $default  reduce using rule 81 (val)


State 141

   16 funcao: FUNCTION ID empilha_escopo_func '(' ')' . corpo desempilha_escopo_func

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 128

    cmd_1        go to state 129
    cmd_2        go to state 130
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    corpo        go to state 158
    exp          go to state 29
    val          go to state 30


State 142

   15 funcao: FUNCTION ID empilha_escopo_func '(' args . ')' corpo desempilha_escopo_func
   17 args: args . ',' arg

    ')'  shift, and go to state 159
    ','  shift, and go to state 160


State 143

   18 args: arg .

    $default  reduce using rule 18 (args)


State 144

   21 arg: exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 21 (arg)


State 145

   78 params: exp ',' params .

    $default  reduce using rule 78 (params)


State 146

   37 prop: ID '[' exp ']' .

    $default  reduce using rule 37 (prop)


State 147

   39 atr_array: ID '[' atr ']' '=' exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 39 (atr_array)


State 148

   47 matrix: ID . indices

    '['  shift, and go to state 121

    indices  go to state 161


State 149

   45 matexp: matexp . '*' matexp
   46       | matexp . '+' matexp
   46       | matexp '+' matexp .

    '*'  shift, and go to state 125

    $default  reduce using rule 46 (matexp)


State 150

   45 matexp: matexp . '*' matexp
   45       | matexp '*' matexp .
   46       | matexp . '+' matexp

    $default  reduce using rule 45 (matexp)


State 151

   42 rec: exp '=' rec .

    $default  reduce using rule 42 (rec)


State 152

   63 corpo: '{' cmds . '}'

    '}'  shift, and go to state 162


State 153

   64 corpo: cmd_1 ';' .

    $default  reduce using rule 64 (corpo)


State 154

   61 condicional: IF '(' condicao ')' corpo ELSE . corpo

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 128

    cmd_1        go to state 129
    cmd_2        go to state 130
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    corpo        go to state 163
    exp          go to state 29
    val          go to state 30


State 155

   59 for_loop: FOR '(' LET decl ';' condicao . ';' atr ')' corpo

    ';'  shift, and go to state 164


State 156

   60 for_loop: FOR '(' atr ';' condicao ';' . atr ')' corpo

    ID  shift, and go to state 73

    atr        go to state 165
    atr_id     go to state 22
    atr_obj    go to state 23
    atr_array  go to state 24


State 157

   20 arg: ID '=' . exp

    NUM     shift, and go to state 1
    ID      shift, and go to state 45
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    exp  go to state 166
    val  go to state 30


State 158

   16 funcao: FUNCTION ID empilha_escopo_func '(' ')' corpo . desempilha_escopo_func

    $default  reduce using rule 25 (desempilha_escopo)

    desempilha_escopo_func  go to state 167
    desempilha_escopo       go to state 168


State 159

   15 funcao: FUNCTION ID empilha_escopo_func '(' args ')' . corpo desempilha_escopo_func

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 128

    cmd_1        go to state 129
    cmd_2        go to state 130
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    corpo        go to state 169
    exp          go to state 29
    val          go to state 30


State 160

   17 args: args ',' . arg

    NUM     shift, and go to state 1
    ID      shift, and go to state 140
    OBJ     shift, and go to state 6
    ARRAY   shift, and go to state 7
    STRING  shift, and go to state 8
    '-'     shift, and go to state 14
    '('     shift, and go to state 15

    arg  go to state 170
    exp  go to state 144
    val  go to state 30


State 161

   47 matrix: ID indices .

    $default  reduce using rule 47 (matrix)


State 162

   63 corpo: '{' cmds '}' .

    $default  reduce using rule 63 (corpo)


State 163

   61 condicional: IF '(' condicao ')' corpo ELSE corpo .

    $default  reduce using rule 61 (condicional)


State 164

   59 for_loop: FOR '(' LET decl ';' condicao ';' . atr ')' corpo

    ID  shift, and go to state 73

    atr        go to state 171
    atr_id     go to state 22
    atr_obj    go to state 23
    atr_array  go to state 24


State 165

   60 for_loop: FOR '(' atr ';' condicao ';' atr . ')' corpo

    ')'  shift, and go to state 172


State 166

   20 arg: ID '=' exp .
   71 exp: exp . '+' exp
   72    | exp . '-' exp
   73    | exp . '*' exp
   74    | exp . '/' exp
   77    | exp . '(' params ')'

    '+'  shift, and go to state 53
    '-'  shift, and go to state 54
    '*'  shift, and go to state 55
    '/'  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 20 (arg)


State 167

   16 funcao: FUNCTION ID empilha_escopo_func '(' ')' corpo desempilha_escopo_func .

    $default  reduce using rule 16 (funcao)


State 168

   23 desempilha_escopo_func: desempilha_escopo .

    $default  reduce using rule 23 (desempilha_escopo_func)


State 169

   15 funcao: FUNCTION ID empilha_escopo_func '(' args ')' corpo . desempilha_escopo_func

    $default  reduce using rule 25 (desempilha_escopo)

    desempilha_escopo_func  go to state 173
    desempilha_escopo       go to state 168


State 170

   17 args: args ',' arg .

    $default  reduce using rule 17 (args)


State 171

   59 for_loop: FOR '(' LET decl ';' condicao ';' atr . ')' corpo

    ')'  shift, and go to state 174


State 172

   60 for_loop: FOR '(' atr ';' condicao ';' atr ')' . corpo

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 128

    cmd_1        go to state 129
    cmd_2        go to state 130
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    corpo        go to state 175
    exp          go to state 29
    val          go to state 30


State 173

   15 funcao: FUNCTION ID empilha_escopo_func '(' args ')' corpo desempilha_escopo_func .

    $default  reduce using rule 15 (funcao)


State 174

   59 for_loop: FOR '(' LET decl ';' condicao ';' atr ')' . corpo

    NUM       shift, and go to state 1
    ID        shift, and go to state 2
    LET       shift, and go to state 3
    VAR       shift, and go to state 4
    CONST     shift, and go to state 5
    OBJ       shift, and go to state 6
    ARRAY     shift, and go to state 7
    STRING    shift, and go to state 8
    IF        shift, and go to state 9
    WHILE     shift, and go to state 10
    FOR       shift, and go to state 11
    FUNCTION  shift, and go to state 12
    RETURN    shift, and go to state 13
    '-'       shift, and go to state 14
    '('       shift, and go to state 15
    '{'       shift, and go to state 128

    cmd_1        go to state 129
    cmd_2        go to state 130
    funcao       go to state 20
    atr          go to state 21
    atr_id       go to state 22
    atr_obj      go to state 23
    atr_array    go to state 24
    loop         go to state 25
    while_loop   go to state 26
    for_loop     go to state 27
    condicional  go to state 28
    corpo        go to state 176
    exp          go to state 29
    val          go to state 30


State 175

   60 for_loop: FOR '(' atr ';' condicao ';' atr ')' corpo .

    $default  reduce using rule 60 (for_loop)


State 176

   59 for_loop: FOR '(' LET decl ';' condicao ';' atr ')' corpo .

    $default  reduce using rule 59 (for_loop)
