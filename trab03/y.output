Terminals unused in grammar

    WHILE
    FOR


Grammar

    0 $accept: s $end

    1 s: cmds

    2 cmds: cmd_1 ';' cmds
    3     | cmd_2 cmds
    4     | %empty

    5 cmd_1: atr
    6      | LET decl

    7 cmd_2: condicional

    8 atr: atr_id
    9    | atr_obj
   10    | atr_array

   11 atr_id: ID '=' exp
   12       | ID '=' atr_recursiva
   13       | ID ADD exp

   14 atr_recursiva: ID '=' exp
   15              | ID '=' atr_recursiva

   16 atr_obj: ID '.' prop '=' exp
   17        | ID '.' prop ADD exp

   18 prop: ID
   19     | ID '[' exp ']'

   20 atr_array: ID '[' exp ']' '=' exp

   21 decl: ID '=' exp fim_decl
   22     | ID fim_decl

   23 fim_decl: ',' decl
   24         | %empty

   25 condicional: IF '(' condicao ')' corpo ELSE corpo
   26            | IF '(' condicao ')' corpo

   27 corpo: '{' cmds '}'
   28      | cmd_1 ';'
   29      | cmd_2

   30 condicao: exp '>' exp
   31         | exp '<' exp
   32         | exp IGUAL exp
   33         | exp DIF exp
   34         | exp

   35 exp: exp '+' exp
   36    | exp '-' exp
   37    | exp '*' exp
   38    | exp '/' exp
   39    | ID '.' ID
   40    | ID '[' exp ']'
   41    | val

   42 val: ID
   43    | NUM
   44    | '-' NUM
   45    | '(' exp ')'
   46    | OBJ
   47    | ARRAY
   48    | STRING
   49    | ID INC


Terminals, with rules where they appear

    $end (0) 0
    '#' (35)
    '(' (40) 25 26 45
    ')' (41) 25 26 45
    '*' (42) 37
    '+' (43) 35
    ',' (44) 23
    '-' (45) 36 44
    '.' (46) 16 17 39
    '/' (47) 38
    ';' (59) 2 28
    '<' (60) 31
    '=' (61) 11 12 14 15 16 20 21
    '>' (62) 30
    '[' (91) 19 20 40
    ']' (93) 19 20 40
    '{' (123) 27
    '}' (125) 27
    error (256)
    NUM (258) 43 44
    ID (259) 11 12 13 14 15 16 17 18 19 20 21 22 39 40 42 49
    LET (260) 6
    OBJ (261) 46
    ARRAY (262) 47
    STRING (263) 48
    ADD (264) 13 17
    IF (265) 25 26
    ELSE (266) 25
    IGUAL (267) 32
    DIF (268) 33
    INC (269) 49
    WHILE (270)
    FOR (271)


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    s (35)
        on left: 1
        on right: 0
    cmds (36)
        on left: 2 3 4
        on right: 1 2 3 27
    cmd_1 (37)
        on left: 5 6
        on right: 2 28
    cmd_2 (38)
        on left: 7
        on right: 3 29
    atr (39)
        on left: 8 9 10
        on right: 5
    atr_id (40)
        on left: 11 12 13
        on right: 8
    atr_recursiva (41)
        on left: 14 15
        on right: 12 15
    atr_obj (42)
        on left: 16 17
        on right: 9
    prop (43)
        on left: 18 19
        on right: 16 17
    atr_array (44)
        on left: 20
        on right: 10
    decl (45)
        on left: 21 22
        on right: 6 23
    fim_decl (46)
        on left: 23 24
        on right: 21 22
    condicional (47)
        on left: 25 26
        on right: 7
    corpo (48)
        on left: 27 28 29
        on right: 25 26
    condicao (49)
        on left: 30 31 32 33 34
        on right: 25 26
    exp (50)
        on left: 35 36 37 38 39 40 41
        on right: 11 13 14 16 17 19 20 21 30 31 32 33 34 35 36 37 38 40 45
    val (51)
        on left: 42 43 44 45 46 47 48 49
        on right: 41


State 0

    0 $accept: . s $end

    ID   shift, and go to state 1
    LET  shift, and go to state 2
    IF   shift, and go to state 3

    $default  reduce using rule 4 (cmds)

    s            go to state 4
    cmds         go to state 5
    cmd_1        go to state 6
    cmd_2        go to state 7
    atr          go to state 8
    atr_id       go to state 9
    atr_obj      go to state 10
    atr_array    go to state 11
    condicional  go to state 12


State 1

   11 atr_id: ID . '=' exp
   12       | ID . '=' atr_recursiva
   13       | ID . ADD exp
   16 atr_obj: ID . '.' prop '=' exp
   17        | ID . '.' prop ADD exp
   20 atr_array: ID . '[' exp ']' '=' exp

    ADD  shift, and go to state 13
    '='  shift, and go to state 14
    '.'  shift, and go to state 15
    '['  shift, and go to state 16


State 2

    6 cmd_1: LET . decl

    ID  shift, and go to state 17

    decl  go to state 18


State 3

   25 condicional: IF . '(' condicao ')' corpo ELSE corpo
   26            | IF . '(' condicao ')' corpo

    '('  shift, and go to state 19


State 4

    0 $accept: s . $end

    $end  shift, and go to state 20


State 5

    1 s: cmds .

    $default  reduce using rule 1 (s)


State 6

    2 cmds: cmd_1 . ';' cmds

    ';'  shift, and go to state 21


State 7

    3 cmds: cmd_2 . cmds

    ID   shift, and go to state 1
    LET  shift, and go to state 2
    IF   shift, and go to state 3

    $default  reduce using rule 4 (cmds)

    cmds         go to state 22
    cmd_1        go to state 6
    cmd_2        go to state 7
    atr          go to state 8
    atr_id       go to state 9
    atr_obj      go to state 10
    atr_array    go to state 11
    condicional  go to state 12


State 8

    5 cmd_1: atr .

    $default  reduce using rule 5 (cmd_1)


State 9

    8 atr: atr_id .

    $default  reduce using rule 8 (atr)


State 10

    9 atr: atr_obj .

    $default  reduce using rule 9 (atr)


State 11

   10 atr: atr_array .

    $default  reduce using rule 10 (atr)


State 12

    7 cmd_2: condicional .

    $default  reduce using rule 7 (cmd_2)


State 13

   13 atr_id: ID ADD . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 30
    val  go to state 31


State 14

   11 atr_id: ID '=' . exp
   12       | ID '=' . atr_recursiva

    NUM     shift, and go to state 23
    ID      shift, and go to state 32
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    atr_recursiva  go to state 33
    exp            go to state 34
    val            go to state 31


State 15

   16 atr_obj: ID '.' . prop '=' exp
   17        | ID '.' . prop ADD exp

    ID  shift, and go to state 35

    prop  go to state 36


State 16

   20 atr_array: ID '[' . exp ']' '=' exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 37
    val  go to state 31


State 17

   21 decl: ID . '=' exp fim_decl
   22     | ID . fim_decl

    '='  shift, and go to state 38
    ','  shift, and go to state 39

    $default  reduce using rule 24 (fim_decl)

    fim_decl  go to state 40


State 18

    6 cmd_1: LET decl .

    $default  reduce using rule 6 (cmd_1)


State 19

   25 condicional: IF '(' . condicao ')' corpo ELSE corpo
   26            | IF '(' . condicao ')' corpo

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    condicao  go to state 41
    exp       go to state 42
    val       go to state 31


State 20

    0 $accept: s $end .

    $default  accept


State 21

    2 cmds: cmd_1 ';' . cmds

    ID   shift, and go to state 1
    LET  shift, and go to state 2
    IF   shift, and go to state 3

    $default  reduce using rule 4 (cmds)

    cmds         go to state 43
    cmd_1        go to state 6
    cmd_2        go to state 7
    atr          go to state 8
    atr_id       go to state 9
    atr_obj      go to state 10
    atr_array    go to state 11
    condicional  go to state 12


State 22

    3 cmds: cmd_2 cmds .

    $default  reduce using rule 3 (cmds)


State 23

   43 val: NUM .

    $default  reduce using rule 43 (val)


State 24

   39 exp: ID . '.' ID
   40    | ID . '[' exp ']'
   42 val: ID .
   49    | ID . INC

    INC  shift, and go to state 44
    '.'  shift, and go to state 45
    '['  shift, and go to state 46

    $default  reduce using rule 42 (val)


State 25

   46 val: OBJ .

    $default  reduce using rule 46 (val)


State 26

   47 val: ARRAY .

    $default  reduce using rule 47 (val)


State 27

   48 val: STRING .

    $default  reduce using rule 48 (val)


State 28

   44 val: '-' . NUM

    NUM  shift, and go to state 47


State 29

   45 val: '(' . exp ')'

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 48
    val  go to state 31


State 30

   13 atr_id: ID ADD exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 13 (atr_id)


State 31

   41 exp: val .

    $default  reduce using rule 41 (exp)


State 32

   14 atr_recursiva: ID . '=' exp
   15              | ID . '=' atr_recursiva
   39 exp: ID . '.' ID
   40    | ID . '[' exp ']'
   42 val: ID .
   49    | ID . INC

    INC  shift, and go to state 44
    '='  shift, and go to state 53
    '.'  shift, and go to state 45
    '['  shift, and go to state 46

    $default  reduce using rule 42 (val)


State 33

   12 atr_id: ID '=' atr_recursiva .

    $default  reduce using rule 12 (atr_id)


State 34

   11 atr_id: ID '=' exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 11 (atr_id)


State 35

   18 prop: ID .
   19     | ID . '[' exp ']'

    '['  shift, and go to state 54

    $default  reduce using rule 18 (prop)


State 36

   16 atr_obj: ID '.' prop . '=' exp
   17        | ID '.' prop . ADD exp

    ADD  shift, and go to state 55
    '='  shift, and go to state 56


State 37

   20 atr_array: ID '[' exp . ']' '=' exp
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52
    ']'  shift, and go to state 57


State 38

   21 decl: ID '=' . exp fim_decl

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 58
    val  go to state 31


State 39

   23 fim_decl: ',' . decl

    ID  shift, and go to state 17

    decl  go to state 59


State 40

   22 decl: ID fim_decl .

    $default  reduce using rule 22 (decl)


State 41

   25 condicional: IF '(' condicao . ')' corpo ELSE corpo
   26            | IF '(' condicao . ')' corpo

    ')'  shift, and go to state 60


State 42

   30 condicao: exp . '>' exp
   31         | exp . '<' exp
   32         | exp . IGUAL exp
   33         | exp . DIF exp
   34         | exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    IGUAL  shift, and go to state 61
    DIF    shift, and go to state 62
    '+'    shift, and go to state 49
    '-'    shift, and go to state 50
    '*'    shift, and go to state 51
    '/'    shift, and go to state 52
    '>'    shift, and go to state 63
    '<'    shift, and go to state 64

    $default  reduce using rule 34 (condicao)


State 43

    2 cmds: cmd_1 ';' cmds .

    $default  reduce using rule 2 (cmds)


State 44

   49 val: ID INC .

    $default  reduce using rule 49 (val)


State 45

   39 exp: ID '.' . ID

    ID  shift, and go to state 65


State 46

   40 exp: ID '[' . exp ']'

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 66
    val  go to state 31


State 47

   44 val: '-' NUM .

    $default  reduce using rule 44 (val)


State 48

   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp
   45 val: '(' exp . ')'

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52
    ')'  shift, and go to state 67


State 49

   35 exp: exp '+' . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 68
    val  go to state 31


State 50

   36 exp: exp '-' . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 69
    val  go to state 31


State 51

   37 exp: exp '*' . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 70
    val  go to state 31


State 52

   38 exp: exp '/' . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 71
    val  go to state 31


State 53

   14 atr_recursiva: ID '=' . exp
   15              | ID '=' . atr_recursiva

    NUM     shift, and go to state 23
    ID      shift, and go to state 32
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    atr_recursiva  go to state 72
    exp            go to state 73
    val            go to state 31


State 54

   19 prop: ID '[' . exp ']'

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 74
    val  go to state 31


State 55

   17 atr_obj: ID '.' prop ADD . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 75
    val  go to state 31


State 56

   16 atr_obj: ID '.' prop '=' . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 76
    val  go to state 31


State 57

   20 atr_array: ID '[' exp ']' . '=' exp

    '='  shift, and go to state 77


State 58

   21 decl: ID '=' exp . fim_decl
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52
    ','  shift, and go to state 39

    $default  reduce using rule 24 (fim_decl)

    fim_decl  go to state 78


State 59

   23 fim_decl: ',' decl .

    $default  reduce using rule 23 (fim_decl)


State 60

   25 condicional: IF '(' condicao ')' . corpo ELSE corpo
   26            | IF '(' condicao ')' . corpo

    ID   shift, and go to state 1
    LET  shift, and go to state 2
    IF   shift, and go to state 3
    '{'  shift, and go to state 79

    cmd_1        go to state 80
    cmd_2        go to state 81
    atr          go to state 8
    atr_id       go to state 9
    atr_obj      go to state 10
    atr_array    go to state 11
    condicional  go to state 12
    corpo        go to state 82


State 61

   32 condicao: exp IGUAL . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 83
    val  go to state 31


State 62

   33 condicao: exp DIF . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 84
    val  go to state 31


State 63

   30 condicao: exp '>' . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 85
    val  go to state 31


State 64

   31 condicao: exp '<' . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 86
    val  go to state 31


State 65

   39 exp: ID '.' ID .

    $default  reduce using rule 39 (exp)


State 66

   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp
   40    | ID '[' exp . ']'

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52
    ']'  shift, and go to state 87


State 67

   45 val: '(' exp ')' .

    $default  reduce using rule 45 (val)


State 68

   35 exp: exp . '+' exp
   35    | exp '+' exp .
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 35 (exp)


State 69

   35 exp: exp . '+' exp
   36    | exp . '-' exp
   36    | exp '-' exp .
   37    | exp . '*' exp
   38    | exp . '/' exp

    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 36 (exp)


State 70

   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   37    | exp '*' exp .
   38    | exp . '/' exp

    $default  reduce using rule 37 (exp)


State 71

   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp
   38    | exp '/' exp .

    $default  reduce using rule 38 (exp)


State 72

   15 atr_recursiva: ID '=' atr_recursiva .

    $default  reduce using rule 15 (atr_recursiva)


State 73

   14 atr_recursiva: ID '=' exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 14 (atr_recursiva)


State 74

   19 prop: ID '[' exp . ']'
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52
    ']'  shift, and go to state 88


State 75

   17 atr_obj: ID '.' prop ADD exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 17 (atr_obj)


State 76

   16 atr_obj: ID '.' prop '=' exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 16 (atr_obj)


State 77

   20 atr_array: ID '[' exp ']' '=' . exp

    NUM     shift, and go to state 23
    ID      shift, and go to state 24
    OBJ     shift, and go to state 25
    ARRAY   shift, and go to state 26
    STRING  shift, and go to state 27
    '-'     shift, and go to state 28
    '('     shift, and go to state 29

    exp  go to state 89
    val  go to state 31


State 78

   21 decl: ID '=' exp fim_decl .

    $default  reduce using rule 21 (decl)


State 79

   27 corpo: '{' . cmds '}'

    ID   shift, and go to state 1
    LET  shift, and go to state 2
    IF   shift, and go to state 3

    $default  reduce using rule 4 (cmds)

    cmds         go to state 90
    cmd_1        go to state 6
    cmd_2        go to state 7
    atr          go to state 8
    atr_id       go to state 9
    atr_obj      go to state 10
    atr_array    go to state 11
    condicional  go to state 12


State 80

   28 corpo: cmd_1 . ';'

    ';'  shift, and go to state 91


State 81

   29 corpo: cmd_2 .

    $default  reduce using rule 29 (corpo)


State 82

   25 condicional: IF '(' condicao ')' corpo . ELSE corpo
   26            | IF '(' condicao ')' corpo .

    ELSE  shift, and go to state 92

    $default  reduce using rule 26 (condicional)


State 83

   32 condicao: exp IGUAL exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 32 (condicao)


State 84

   33 condicao: exp DIF exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 33 (condicao)


State 85

   30 condicao: exp '>' exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 30 (condicao)


State 86

   31 condicao: exp '<' exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 31 (condicao)


State 87

   40 exp: ID '[' exp ']' .

    $default  reduce using rule 40 (exp)


State 88

   19 prop: ID '[' exp ']' .

    $default  reduce using rule 19 (prop)


State 89

   20 atr_array: ID '[' exp ']' '=' exp .
   35 exp: exp . '+' exp
   36    | exp . '-' exp
   37    | exp . '*' exp
   38    | exp . '/' exp

    '+'  shift, and go to state 49
    '-'  shift, and go to state 50
    '*'  shift, and go to state 51
    '/'  shift, and go to state 52

    $default  reduce using rule 20 (atr_array)


State 90

   27 corpo: '{' cmds . '}'

    '}'  shift, and go to state 93


State 91

   28 corpo: cmd_1 ';' .

    $default  reduce using rule 28 (corpo)


State 92

   25 condicional: IF '(' condicao ')' corpo ELSE . corpo

    ID   shift, and go to state 1
    LET  shift, and go to state 2
    IF   shift, and go to state 3
    '{'  shift, and go to state 79

    cmd_1        go to state 80
    cmd_2        go to state 81
    atr          go to state 8
    atr_id       go to state 9
    atr_obj      go to state 10
    atr_array    go to state 11
    condicional  go to state 12
    corpo        go to state 94


State 93

   27 corpo: '{' cmds '}' .

    $default  reduce using rule 27 (corpo)


State 94

   25 condicional: IF '(' condicao ')' corpo ELSE corpo .

    $default  reduce using rule 25 (condicional)
