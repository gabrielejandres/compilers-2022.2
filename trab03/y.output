Grammar

    0 $accept: s $end

    1 s: cmds

    2 cmds: cmd_1 separador cmds
    3     | cmd_2 cmds
    4     | %empty

    5 cmd_1: atr
    6      | LET decl
    7      | loop

    8 cmd_2: condicional

    9 atr: atr_id
   10    | atr_obj
   11    | atr_array

   12 atr_id: ID '=' exp
   13       | ID '=' atr_recursiva
   14       | ID ADD exp

   15 atr_recursiva: ID '=' exp
   16              | ID '=' atr_recursiva

   17 atr_obj: ID '.' prop '=' exp
   18        | ID '.' prop ADD exp

   19 prop: ID
   20     | ID '[' exp ']'

   21 atr_array: ID indices '=' rec
   22          | ID '[' atr ']' '=' exp

   23 rec: exp
   24    | test
   25    | exp '=' rec
   26    | atr_array

   27 decl: ID '=' exp fim_decl
   28     | ID fim_decl

   29 fim_decl: ',' decl
   30         | %empty

   31 loop: while_loop
   32     | for_loop

   33 separador: separador ';'
   34          | %empty

   35 while_loop: WHILE '(' condicao ')' corpo

   36 for_loop: FOR '(' LET decl ';' condicao ';' atr ')' corpo
   37         | FOR '(' atr ';' condicao ';' atr ')' corpo

   38 condicional: IF '(' condicao ')' corpo ELSE corpo
   39            | IF '(' condicao ')' corpo

   40 corpo: '{' cmds '}'
   41      | cmd_1 ';'
   42      | cmd_2

   43 condicao: exp '>' exp
   44         | exp '<' exp
   45         | exp IGUAL exp
   46         | exp DIF exp
   47         | exp

   48 exp: exp '+' exp
   49    | exp '-' exp
   50    | exp '*' exp
   51    | exp '/' exp
   52    | ID '.' ID
   53    | val

   54 test: matrix
   55     | test '*' test
   56     | test '+' test

   57 matrix: ID indices

   58 indices: '[' exp ']' indices
   59        | '[' exp ']'

   60 val: ID
   61    | NUM
   62    | '-' NUM
   63    | '(' exp ')'
   64    | OBJ
   65    | ARRAY
   66    | STRING
   67    | ID INC


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 35 36 37 38 39 63
    ')' (41) 35 36 37 38 39 63
    '*' (42) 50 55
    '+' (43) 48 56
    ',' (44) 29
    '-' (45) 49 62
    '.' (46) 17 18 52
    '/' (47) 51
    ';' (59) 33 36 37 41
    '<' (60) 44
    '=' (61) 12 13 15 16 17 21 22 25 27
    '>' (62) 43
    'T' (84)
    '[' (91) 20 22 58 59
    ']' (93) 20 22 58 59
    '{' (123) 40
    '}' (125) 40
    error (256)
    NUM (258) 61 62
    ID (259) 12 13 14 15 16 17 18 19 20 21 22 27 28 52 57 60 67
    LET (260) 6 36
    OBJ (261) 64
    ARRAY (262) 65
    STRING (263) 66
    ADD (264) 14 18
    IF (265) 38 39
    ELSE (266) 38
    IGUAL (267) 45
    DIF (268) 46
    INC (269) 67
    WHILE (270) 35
    FOR (271) 36 37


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    s (35)
        on left: 1
        on right: 0
    cmds (36)
        on left: 2 3 4
        on right: 1 2 3 40
    cmd_1 (37)
        on left: 5 6 7
        on right: 2 41
    cmd_2 (38)
        on left: 8
        on right: 3 42
    atr (39)
        on left: 9 10 11
        on right: 5 22 36 37
    atr_id (40)
        on left: 12 13 14
        on right: 9
    atr_recursiva (41)
        on left: 15 16
        on right: 13 16
    atr_obj (42)
        on left: 17 18
        on right: 10
    prop (43)
        on left: 19 20
        on right: 17 18
    atr_array (44)
        on left: 21 22
        on right: 11 26
    rec (45)
        on left: 23 24 25 26
        on right: 21 25
    decl (46)
        on left: 27 28
        on right: 6 29 36
    fim_decl (47)
        on left: 29 30
        on right: 27 28
    loop (48)
        on left: 31 32
        on right: 7
    separador (49)
        on left: 33 34
        on right: 2 33
    while_loop (50)
        on left: 35
        on right: 31
    for_loop (51)
        on left: 36 37
        on right: 32
    condicional (52)
        on left: 38 39
        on right: 8
    corpo (53)
        on left: 40 41 42
        on right: 35 36 37 38 39
    condicao (54)
        on left: 43 44 45 46 47
        on right: 35 36 37 38 39
    exp (55)
        on left: 48 49 50 51 52 53
        on right: 12 14 15 17 18 20 22 23 25 27 43 44 45 46 47 48 49 50 51 58 59 63
    test (56)
        on left: 54 55 56
        on right: 24 55 56
    matrix (57)
        on left: 57
        on right: 54
    indices (58)
        on left: 58 59
        on right: 21 57 58
    val (59)
        on left: 60 61 62 63 64 65 66 67
        on right: 53


State 0

    0 $accept: . s $end

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5

    $default  reduce using rule 4 (cmds)

    s            go to state 6
    cmds         go to state 7
    cmd_1        go to state 8
    cmd_2        go to state 9
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17


State 1

   12 atr_id: ID . '=' exp
   13       | ID . '=' atr_recursiva
   14       | ID . ADD exp
   17 atr_obj: ID . '.' prop '=' exp
   18        | ID . '.' prop ADD exp
   21 atr_array: ID . indices '=' rec
   22          | ID . '[' atr ']' '=' exp

    ADD  shift, and go to state 18
    '='  shift, and go to state 19
    '.'  shift, and go to state 20
    '['  shift, and go to state 21

    indices  go to state 22


State 2

    6 cmd_1: LET . decl

    ID  shift, and go to state 23

    decl  go to state 24


State 3

   38 condicional: IF . '(' condicao ')' corpo ELSE corpo
   39            | IF . '(' condicao ')' corpo

    '('  shift, and go to state 25


State 4

   35 while_loop: WHILE . '(' condicao ')' corpo

    '('  shift, and go to state 26


State 5

   36 for_loop: FOR . '(' LET decl ';' condicao ';' atr ')' corpo
   37         | FOR . '(' atr ';' condicao ';' atr ')' corpo

    '('  shift, and go to state 27


State 6

    0 $accept: s . $end

    $end  shift, and go to state 28


State 7

    1 s: cmds .

    $default  reduce using rule 1 (s)


State 8

    2 cmds: cmd_1 . separador cmds

    $default  reduce using rule 34 (separador)

    separador  go to state 29


State 9

    3 cmds: cmd_2 . cmds

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5

    $default  reduce using rule 4 (cmds)

    cmds         go to state 30
    cmd_1        go to state 8
    cmd_2        go to state 9
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17


State 10

    5 cmd_1: atr .

    $default  reduce using rule 5 (cmd_1)


State 11

    9 atr: atr_id .

    $default  reduce using rule 9 (atr)


State 12

   10 atr: atr_obj .

    $default  reduce using rule 10 (atr)


State 13

   11 atr: atr_array .

    $default  reduce using rule 11 (atr)


State 14

    7 cmd_1: loop .

    $default  reduce using rule 7 (cmd_1)


State 15

   31 loop: while_loop .

    $default  reduce using rule 31 (loop)


State 16

   32 loop: for_loop .

    $default  reduce using rule 32 (loop)


State 17

    8 cmd_2: condicional .

    $default  reduce using rule 8 (cmd_2)


State 18

   14 atr_id: ID ADD . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 38
    val  go to state 39


State 19

   12 atr_id: ID '=' . exp
   13       | ID '=' . atr_recursiva

    NUM     shift, and go to state 31
    ID      shift, and go to state 40
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    atr_recursiva  go to state 41
    exp            go to state 42
    val            go to state 39


State 20

   17 atr_obj: ID '.' . prop '=' exp
   18        | ID '.' . prop ADD exp

    ID  shift, and go to state 43

    prop  go to state 44


State 21

   22 atr_array: ID '[' . atr ']' '=' exp
   58 indices: '[' . exp ']' indices
   59        | '[' . exp ']'

    NUM     shift, and go to state 31
    ID      shift, and go to state 45
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    atr        go to state 46
    atr_id     go to state 11
    atr_obj    go to state 12
    atr_array  go to state 13
    exp        go to state 47
    val        go to state 39


State 22

   21 atr_array: ID indices . '=' rec

    '='  shift, and go to state 48


State 23

   27 decl: ID . '=' exp fim_decl
   28     | ID . fim_decl

    '='  shift, and go to state 49
    ','  shift, and go to state 50

    $default  reduce using rule 30 (fim_decl)

    fim_decl  go to state 51


State 24

    6 cmd_1: LET decl .

    $default  reduce using rule 6 (cmd_1)


State 25

   38 condicional: IF '(' . condicao ')' corpo ELSE corpo
   39            | IF '(' . condicao ')' corpo

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    condicao  go to state 52
    exp       go to state 53
    val       go to state 39


State 26

   35 while_loop: WHILE '(' . condicao ')' corpo

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    condicao  go to state 54
    exp       go to state 53
    val       go to state 39


State 27

   36 for_loop: FOR '(' . LET decl ';' condicao ';' atr ')' corpo
   37         | FOR '(' . atr ';' condicao ';' atr ')' corpo

    ID   shift, and go to state 1
    LET  shift, and go to state 55

    atr        go to state 56
    atr_id     go to state 11
    atr_obj    go to state 12
    atr_array  go to state 13


State 28

    0 $accept: s $end .

    $default  accept


State 29

    2 cmds: cmd_1 separador . cmds
   33 separador: separador . ';'

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    ';'    shift, and go to state 57

    $default  reduce using rule 4 (cmds)

    cmds         go to state 58
    cmd_1        go to state 8
    cmd_2        go to state 9
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17


State 30

    3 cmds: cmd_2 cmds .

    $default  reduce using rule 3 (cmds)


State 31

   61 val: NUM .

    $default  reduce using rule 61 (val)


State 32

   52 exp: ID . '.' ID
   60 val: ID .
   67    | ID . INC

    INC  shift, and go to state 59
    '.'  shift, and go to state 60

    $default  reduce using rule 60 (val)


State 33

   64 val: OBJ .

    $default  reduce using rule 64 (val)


State 34

   65 val: ARRAY .

    $default  reduce using rule 65 (val)


State 35

   66 val: STRING .

    $default  reduce using rule 66 (val)


State 36

   62 val: '-' . NUM

    NUM  shift, and go to state 61


State 37

   63 val: '(' . exp ')'

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 62
    val  go to state 39


State 38

   14 atr_id: ID ADD exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 14 (atr_id)


State 39

   53 exp: val .

    $default  reduce using rule 53 (exp)


State 40

   15 atr_recursiva: ID . '=' exp
   16              | ID . '=' atr_recursiva
   52 exp: ID . '.' ID
   60 val: ID .
   67    | ID . INC

    INC  shift, and go to state 59
    '='  shift, and go to state 67
    '.'  shift, and go to state 60

    $default  reduce using rule 60 (val)


State 41

   13 atr_id: ID '=' atr_recursiva .

    $default  reduce using rule 13 (atr_id)


State 42

   12 atr_id: ID '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 12 (atr_id)


State 43

   19 prop: ID .
   20     | ID . '[' exp ']'

    '['  shift, and go to state 68

    $default  reduce using rule 19 (prop)


State 44

   17 atr_obj: ID '.' prop . '=' exp
   18        | ID '.' prop . ADD exp

    ADD  shift, and go to state 69
    '='  shift, and go to state 70


State 45

   12 atr_id: ID . '=' exp
   13       | ID . '=' atr_recursiva
   14       | ID . ADD exp
   17 atr_obj: ID . '.' prop '=' exp
   18        | ID . '.' prop ADD exp
   21 atr_array: ID . indices '=' rec
   22          | ID . '[' atr ']' '=' exp
   52 exp: ID . '.' ID
   60 val: ID .
   67    | ID . INC

    ADD  shift, and go to state 18
    INC  shift, and go to state 59
    '='  shift, and go to state 19
    '.'  shift, and go to state 71
    '['  shift, and go to state 21

    $default  reduce using rule 60 (val)

    indices  go to state 22


State 46

   22 atr_array: ID '[' atr . ']' '=' exp

    ']'  shift, and go to state 72


State 47

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   58 indices: '[' exp . ']' indices
   59        | '[' exp . ']'

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ']'  shift, and go to state 73


State 48

   21 atr_array: ID indices '=' . rec

    NUM     shift, and go to state 31
    ID      shift, and go to state 74
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    atr_array  go to state 75
    rec        go to state 76
    exp        go to state 77
    test       go to state 78
    matrix     go to state 79
    val        go to state 39


State 49

   27 decl: ID '=' . exp fim_decl

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 80
    val  go to state 39


State 50

   29 fim_decl: ',' . decl

    ID  shift, and go to state 23

    decl  go to state 81


State 51

   28 decl: ID fim_decl .

    $default  reduce using rule 28 (decl)


State 52

   38 condicional: IF '(' condicao . ')' corpo ELSE corpo
   39            | IF '(' condicao . ')' corpo

    ')'  shift, and go to state 82


State 53

   43 condicao: exp . '>' exp
   44         | exp . '<' exp
   45         | exp . IGUAL exp
   46         | exp . DIF exp
   47         | exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    IGUAL  shift, and go to state 83
    DIF    shift, and go to state 84
    '+'    shift, and go to state 63
    '-'    shift, and go to state 64
    '*'    shift, and go to state 65
    '/'    shift, and go to state 66
    '>'    shift, and go to state 85
    '<'    shift, and go to state 86

    $default  reduce using rule 47 (condicao)


State 54

   35 while_loop: WHILE '(' condicao . ')' corpo

    ')'  shift, and go to state 87


State 55

   36 for_loop: FOR '(' LET . decl ';' condicao ';' atr ')' corpo

    ID  shift, and go to state 23

    decl  go to state 88


State 56

   37 for_loop: FOR '(' atr . ';' condicao ';' atr ')' corpo

    ';'  shift, and go to state 89


State 57

   33 separador: separador ';' .

    $default  reduce using rule 33 (separador)


State 58

    2 cmds: cmd_1 separador cmds .

    $default  reduce using rule 2 (cmds)


State 59

   67 val: ID INC .

    $default  reduce using rule 67 (val)


State 60

   52 exp: ID '.' . ID

    ID  shift, and go to state 90


State 61

   62 val: '-' NUM .

    $default  reduce using rule 62 (val)


State 62

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   63 val: '(' exp . ')'

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ')'  shift, and go to state 91


State 63

   48 exp: exp '+' . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 92
    val  go to state 39


State 64

   49 exp: exp '-' . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 93
    val  go to state 39


State 65

   50 exp: exp '*' . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 94
    val  go to state 39


State 66

   51 exp: exp '/' . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 95
    val  go to state 39


State 67

   15 atr_recursiva: ID '=' . exp
   16              | ID '=' . atr_recursiva

    NUM     shift, and go to state 31
    ID      shift, and go to state 40
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    atr_recursiva  go to state 96
    exp            go to state 97
    val            go to state 39


State 68

   20 prop: ID '[' . exp ']'

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 98
    val  go to state 39


State 69

   18 atr_obj: ID '.' prop ADD . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 99
    val  go to state 39


State 70

   17 atr_obj: ID '.' prop '=' . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 100
    val  go to state 39


State 71

   17 atr_obj: ID '.' . prop '=' exp
   18        | ID '.' . prop ADD exp
   52 exp: ID '.' . ID

    ID  shift, and go to state 101

    prop  go to state 44


State 72

   22 atr_array: ID '[' atr ']' . '=' exp

    '='  shift, and go to state 102


State 73

   58 indices: '[' exp ']' . indices
   59        | '[' exp ']' .

    '['  shift, and go to state 103

    $default  reduce using rule 59 (indices)

    indices  go to state 104


State 74

   21 atr_array: ID . indices '=' rec
   22          | ID . '[' atr ']' '=' exp
   52 exp: ID . '.' ID
   57 matrix: ID . indices
   60 val: ID .
   67    | ID . INC

    INC  shift, and go to state 59
    '.'  shift, and go to state 60
    '['  shift, and go to state 21

    $default  reduce using rule 60 (val)

    indices  go to state 105


State 75

   26 rec: atr_array .

    $default  reduce using rule 26 (rec)


State 76

   21 atr_array: ID indices '=' rec .

    $default  reduce using rule 21 (atr_array)


State 77

   23 rec: exp .
   25    | exp . '=' rec
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '='  shift, and go to state 106
    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 23 (rec)


State 78

   24 rec: test .
   55 test: test . '*' test
   56     | test . '+' test

    '+'  shift, and go to state 107
    '*'  shift, and go to state 108

    $default  reduce using rule 24 (rec)


State 79

   54 test: matrix .

    $default  reduce using rule 54 (test)


State 80

   27 decl: ID '=' exp . fim_decl
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ','  shift, and go to state 50

    $default  reduce using rule 30 (fim_decl)

    fim_decl  go to state 109


State 81

   29 fim_decl: ',' decl .

    $default  reduce using rule 29 (fim_decl)


State 82

   38 condicional: IF '(' condicao ')' . corpo ELSE corpo
   39            | IF '(' condicao ')' . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 110

    cmd_1        go to state 111
    cmd_2        go to state 112
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 113


State 83

   45 condicao: exp IGUAL . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 114
    val  go to state 39


State 84

   46 condicao: exp DIF . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 115
    val  go to state 39


State 85

   43 condicao: exp '>' . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 116
    val  go to state 39


State 86

   44 condicao: exp '<' . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 117
    val  go to state 39


State 87

   35 while_loop: WHILE '(' condicao ')' . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 110

    cmd_1        go to state 111
    cmd_2        go to state 112
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 118


State 88

   36 for_loop: FOR '(' LET decl . ';' condicao ';' atr ')' corpo

    ';'  shift, and go to state 119


State 89

   37 for_loop: FOR '(' atr ';' . condicao ';' atr ')' corpo

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    condicao  go to state 120
    exp       go to state 53
    val       go to state 39


State 90

   52 exp: ID '.' ID .

    $default  reduce using rule 52 (exp)


State 91

   63 val: '(' exp ')' .

    $default  reduce using rule 63 (val)


State 92

   48 exp: exp . '+' exp
   48    | exp '+' exp .
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 48 (exp)


State 93

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   49    | exp '-' exp .
   50    | exp . '*' exp
   51    | exp . '/' exp

    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 49 (exp)


State 94

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   50    | exp '*' exp .
   51    | exp . '/' exp

    $default  reduce using rule 50 (exp)


State 95

   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp
   51    | exp '/' exp .

    $default  reduce using rule 51 (exp)


State 96

   16 atr_recursiva: ID '=' atr_recursiva .

    $default  reduce using rule 16 (atr_recursiva)


State 97

   15 atr_recursiva: ID '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 15 (atr_recursiva)


State 98

   20 prop: ID '[' exp . ']'
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66
    ']'  shift, and go to state 121


State 99

   18 atr_obj: ID '.' prop ADD exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 18 (atr_obj)


State 100

   17 atr_obj: ID '.' prop '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 17 (atr_obj)


State 101

   19 prop: ID .
   20     | ID . '[' exp ']'
   52 exp: ID '.' ID .

    '['  shift, and go to state 68

    ADD       reduce using rule 19 (prop)
    '='       reduce using rule 19 (prop)
    $default  reduce using rule 52 (exp)


State 102

   22 atr_array: ID '[' atr ']' '=' . exp

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 122
    val  go to state 39


State 103

   58 indices: '[' . exp ']' indices
   59        | '[' . exp ']'

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    exp  go to state 47
    val  go to state 39


State 104

   58 indices: '[' exp ']' indices .

    $default  reduce using rule 58 (indices)


State 105

   21 atr_array: ID indices . '=' rec
   57 matrix: ID indices .

    '='  shift, and go to state 48

    $default  reduce using rule 57 (matrix)


State 106

   25 rec: exp '=' . rec

    NUM     shift, and go to state 31
    ID      shift, and go to state 74
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    atr_array  go to state 75
    rec        go to state 123
    exp        go to state 77
    test       go to state 78
    matrix     go to state 79
    val        go to state 39


State 107

   56 test: test '+' . test

    ID  shift, and go to state 124

    test    go to state 125
    matrix  go to state 79


State 108

   55 test: test '*' . test

    ID  shift, and go to state 124

    test    go to state 126
    matrix  go to state 79


State 109

   27 decl: ID '=' exp fim_decl .

    $default  reduce using rule 27 (decl)


State 110

   40 corpo: '{' . cmds '}'

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5

    $default  reduce using rule 4 (cmds)

    cmds         go to state 127
    cmd_1        go to state 8
    cmd_2        go to state 9
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17


State 111

   41 corpo: cmd_1 . ';'

    ';'  shift, and go to state 128


State 112

   42 corpo: cmd_2 .

    $default  reduce using rule 42 (corpo)


State 113

   38 condicional: IF '(' condicao ')' corpo . ELSE corpo
   39            | IF '(' condicao ')' corpo .

    ELSE  shift, and go to state 129

    $default  reduce using rule 39 (condicional)


State 114

   45 condicao: exp IGUAL exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 45 (condicao)


State 115

   46 condicao: exp DIF exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 46 (condicao)


State 116

   43 condicao: exp '>' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 43 (condicao)


State 117

   44 condicao: exp '<' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 44 (condicao)


State 118

   35 while_loop: WHILE '(' condicao ')' corpo .

    $default  reduce using rule 35 (while_loop)


State 119

   36 for_loop: FOR '(' LET decl ';' . condicao ';' atr ')' corpo

    NUM     shift, and go to state 31
    ID      shift, and go to state 32
    OBJ     shift, and go to state 33
    ARRAY   shift, and go to state 34
    STRING  shift, and go to state 35
    '-'     shift, and go to state 36
    '('     shift, and go to state 37

    condicao  go to state 130
    exp       go to state 53
    val       go to state 39


State 120

   37 for_loop: FOR '(' atr ';' condicao . ';' atr ')' corpo

    ';'  shift, and go to state 131


State 121

   20 prop: ID '[' exp ']' .

    $default  reduce using rule 20 (prop)


State 122

   22 atr_array: ID '[' atr ']' '=' exp .
   48 exp: exp . '+' exp
   49    | exp . '-' exp
   50    | exp . '*' exp
   51    | exp . '/' exp

    '+'  shift, and go to state 63
    '-'  shift, and go to state 64
    '*'  shift, and go to state 65
    '/'  shift, and go to state 66

    $default  reduce using rule 22 (atr_array)


State 123

   25 rec: exp '=' rec .

    $default  reduce using rule 25 (rec)


State 124

   57 matrix: ID . indices

    '['  shift, and go to state 103

    indices  go to state 132


State 125

   55 test: test . '*' test
   56     | test . '+' test
   56     | test '+' test .

    '*'  shift, and go to state 108

    $default  reduce using rule 56 (test)


State 126

   55 test: test . '*' test
   55     | test '*' test .
   56     | test . '+' test

    $default  reduce using rule 55 (test)


State 127

   40 corpo: '{' cmds . '}'

    '}'  shift, and go to state 133


State 128

   41 corpo: cmd_1 ';' .

    $default  reduce using rule 41 (corpo)


State 129

   38 condicional: IF '(' condicao ')' corpo ELSE . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 110

    cmd_1        go to state 111
    cmd_2        go to state 112
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 134


State 130

   36 for_loop: FOR '(' LET decl ';' condicao . ';' atr ')' corpo

    ';'  shift, and go to state 135


State 131

   37 for_loop: FOR '(' atr ';' condicao ';' . atr ')' corpo

    ID  shift, and go to state 1

    atr        go to state 136
    atr_id     go to state 11
    atr_obj    go to state 12
    atr_array  go to state 13


State 132

   57 matrix: ID indices .

    $default  reduce using rule 57 (matrix)


State 133

   40 corpo: '{' cmds '}' .

    $default  reduce using rule 40 (corpo)


State 134

   38 condicional: IF '(' condicao ')' corpo ELSE corpo .

    $default  reduce using rule 38 (condicional)


State 135

   36 for_loop: FOR '(' LET decl ';' condicao ';' . atr ')' corpo

    ID  shift, and go to state 1

    atr        go to state 137
    atr_id     go to state 11
    atr_obj    go to state 12
    atr_array  go to state 13


State 136

   37 for_loop: FOR '(' atr ';' condicao ';' atr . ')' corpo

    ')'  shift, and go to state 138


State 137

   36 for_loop: FOR '(' LET decl ';' condicao ';' atr . ')' corpo

    ')'  shift, and go to state 139


State 138

   37 for_loop: FOR '(' atr ';' condicao ';' atr ')' . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 110

    cmd_1        go to state 111
    cmd_2        go to state 112
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 140


State 139

   36 for_loop: FOR '(' LET decl ';' condicao ';' atr ')' . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 110

    cmd_1        go to state 111
    cmd_2        go to state 112
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 141


State 140

   37 for_loop: FOR '(' atr ';' condicao ';' atr ')' corpo .

    $default  reduce using rule 37 (for_loop)


State 141

   36 for_loop: FOR '(' LET decl ';' condicao ';' atr ')' corpo .

    $default  reduce using rule 36 (for_loop)
