Grammar

    0 $accept: s $end

    1 s: cmds

    2 cmds: cmd_1 ';' cmds
    3     | cmd_2 cmds
    4     | %empty

    5 cmd_1: atr
    6      | LET decl
    7      | loop

    8 cmd_2: condicional

    9 atr: atr_id
   10    | atr_obj
   11    | atr_array

   12 atr_id: ID '=' exp
   13       | ID '=' atr_recursiva
   14       | ID ADD exp

   15 atr_recursiva: ID '=' exp
   16              | ID '=' atr_recursiva

   17 atr_obj: ID '.' prop '=' exp
   18        | ID '.' prop ADD exp

   19 prop: ID
   20     | ID '[' exp ']'

   21 atr_array: ID '[' exp ']' '=' exp

   22 decl: ID '=' exp fim_decl
   23     | ID fim_decl

   24 fim_decl: ',' decl
   25         | %empty

   26 loop: while_loop
   27     | for_loop

   28 while_loop: WHILE '(' condicao ')' corpo

   29 for_loop: FOR '(' LET decl ';' condicao ';' atr ')' corpo
   30         | FOR '(' decl ';' condicao ';' atr ')' corpo

   31 condicional: IF '(' condicao ')' corpo ELSE corpo
   32            | IF '(' condicao ')' corpo

   33 corpo: '{' cmds '}'
   34      | cmd_1 ';'
   35      | cmd_2

   36 condicao: exp '>' exp
   37         | exp '<' exp
   38         | exp IGUAL exp
   39         | exp DIF exp
   40         | exp

   41 exp: exp '+' exp
   42    | exp '-' exp
   43    | exp '*' exp
   44    | exp '/' exp
   45    | ID '.' ID
   46    | ID '[' exp ']'
   47    | val

   48 val: ID
   49    | NUM
   50    | '-' NUM
   51    | '(' exp ')'
   52    | OBJ
   53    | ARRAY
   54    | STRING
   55    | ID INC


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 28 29 30 31 32 51
    ')' (41) 28 29 30 31 32 51
    '*' (42) 43
    '+' (43) 41
    ',' (44) 24
    '-' (45) 42 50
    '.' (46) 17 18 45
    '/' (47) 44
    ';' (59) 2 29 30 34
    '<' (60) 37
    '=' (61) 12 13 15 16 17 21 22
    '>' (62) 36
    'T' (84)
    '[' (91) 20 21 46
    ']' (93) 20 21 46
    '{' (123) 33
    '}' (125) 33
    error (256)
    NUM (258) 49 50
    ID (259) 12 13 14 15 16 17 18 19 20 21 22 23 45 46 48 55
    LET (260) 6 29
    OBJ (261) 52
    ARRAY (262) 53
    STRING (263) 54
    ADD (264) 14 18
    IF (265) 31 32
    ELSE (266) 31
    IGUAL (267) 38
    DIF (268) 39
    INC (269) 55
    WHILE (270) 28
    FOR (271) 29 30


Nonterminals, with rules where they appear

    $accept (34)
        on left: 0
    s (35)
        on left: 1
        on right: 0
    cmds (36)
        on left: 2 3 4
        on right: 1 2 3 33
    cmd_1 (37)
        on left: 5 6 7
        on right: 2 34
    cmd_2 (38)
        on left: 8
        on right: 3 35
    atr (39)
        on left: 9 10 11
        on right: 5 29 30
    atr_id (40)
        on left: 12 13 14
        on right: 9
    atr_recursiva (41)
        on left: 15 16
        on right: 13 16
    atr_obj (42)
        on left: 17 18
        on right: 10
    prop (43)
        on left: 19 20
        on right: 17 18
    atr_array (44)
        on left: 21
        on right: 11
    decl (45)
        on left: 22 23
        on right: 6 24 29 30
    fim_decl (46)
        on left: 24 25
        on right: 22 23
    loop (47)
        on left: 26 27
        on right: 7
    while_loop (48)
        on left: 28
        on right: 26
    for_loop (49)
        on left: 29 30
        on right: 27
    condicional (50)
        on left: 31 32
        on right: 8
    corpo (51)
        on left: 33 34 35
        on right: 28 29 30 31 32
    condicao (52)
        on left: 36 37 38 39 40
        on right: 28 29 30 31 32
    exp (53)
        on left: 41 42 43 44 45 46 47
        on right: 12 14 15 17 18 20 21 22 36 37 38 39 40 41 42 43 44 46 51
    val (54)
        on left: 48 49 50 51 52 53 54 55
        on right: 47


State 0

    0 $accept: . s $end

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5

    $default  reduce using rule 4 (cmds)

    s            go to state 6
    cmds         go to state 7
    cmd_1        go to state 8
    cmd_2        go to state 9
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17


State 1

   12 atr_id: ID . '=' exp
   13       | ID . '=' atr_recursiva
   14       | ID . ADD exp
   17 atr_obj: ID . '.' prop '=' exp
   18        | ID . '.' prop ADD exp
   21 atr_array: ID . '[' exp ']' '=' exp

    ADD  shift, and go to state 18
    '='  shift, and go to state 19
    '.'  shift, and go to state 20
    '['  shift, and go to state 21


State 2

    6 cmd_1: LET . decl

    ID  shift, and go to state 22

    decl  go to state 23


State 3

   31 condicional: IF . '(' condicao ')' corpo ELSE corpo
   32            | IF . '(' condicao ')' corpo

    '('  shift, and go to state 24


State 4

   28 while_loop: WHILE . '(' condicao ')' corpo

    '('  shift, and go to state 25


State 5

   29 for_loop: FOR . '(' LET decl ';' condicao ';' atr ')' corpo
   30         | FOR . '(' decl ';' condicao ';' atr ')' corpo

    '('  shift, and go to state 26


State 6

    0 $accept: s . $end

    $end  shift, and go to state 27


State 7

    1 s: cmds .

    $default  reduce using rule 1 (s)


State 8

    2 cmds: cmd_1 . ';' cmds

    ';'  shift, and go to state 28


State 9

    3 cmds: cmd_2 . cmds

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5

    $default  reduce using rule 4 (cmds)

    cmds         go to state 29
    cmd_1        go to state 8
    cmd_2        go to state 9
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17


State 10

    5 cmd_1: atr .

    $default  reduce using rule 5 (cmd_1)


State 11

    9 atr: atr_id .

    $default  reduce using rule 9 (atr)


State 12

   10 atr: atr_obj .

    $default  reduce using rule 10 (atr)


State 13

   11 atr: atr_array .

    $default  reduce using rule 11 (atr)


State 14

    7 cmd_1: loop .

    $default  reduce using rule 7 (cmd_1)


State 15

   26 loop: while_loop .

    $default  reduce using rule 26 (loop)


State 16

   27 loop: for_loop .

    $default  reduce using rule 27 (loop)


State 17

    8 cmd_2: condicional .

    $default  reduce using rule 8 (cmd_2)


State 18

   14 atr_id: ID ADD . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 37
    val  go to state 38


State 19

   12 atr_id: ID '=' . exp
   13       | ID '=' . atr_recursiva

    NUM     shift, and go to state 30
    ID      shift, and go to state 39
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    atr_recursiva  go to state 40
    exp            go to state 41
    val            go to state 38


State 20

   17 atr_obj: ID '.' . prop '=' exp
   18        | ID '.' . prop ADD exp

    ID  shift, and go to state 42

    prop  go to state 43


State 21

   21 atr_array: ID '[' . exp ']' '=' exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 44
    val  go to state 38


State 22

   22 decl: ID . '=' exp fim_decl
   23     | ID . fim_decl

    '='  shift, and go to state 45
    ','  shift, and go to state 46

    $default  reduce using rule 25 (fim_decl)

    fim_decl  go to state 47


State 23

    6 cmd_1: LET decl .

    $default  reduce using rule 6 (cmd_1)


State 24

   31 condicional: IF '(' . condicao ')' corpo ELSE corpo
   32            | IF '(' . condicao ')' corpo

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    condicao  go to state 48
    exp       go to state 49
    val       go to state 38


State 25

   28 while_loop: WHILE '(' . condicao ')' corpo

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    condicao  go to state 50
    exp       go to state 49
    val       go to state 38


State 26

   29 for_loop: FOR '(' . LET decl ';' condicao ';' atr ')' corpo
   30         | FOR '(' . decl ';' condicao ';' atr ')' corpo

    ID   shift, and go to state 22
    LET  shift, and go to state 51

    decl  go to state 52


State 27

    0 $accept: s $end .

    $default  accept


State 28

    2 cmds: cmd_1 ';' . cmds

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5

    $default  reduce using rule 4 (cmds)

    cmds         go to state 53
    cmd_1        go to state 8
    cmd_2        go to state 9
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17


State 29

    3 cmds: cmd_2 cmds .

    $default  reduce using rule 3 (cmds)


State 30

   49 val: NUM .

    $default  reduce using rule 49 (val)


State 31

   45 exp: ID . '.' ID
   46    | ID . '[' exp ']'
   48 val: ID .
   55    | ID . INC

    INC  shift, and go to state 54
    '.'  shift, and go to state 55
    '['  shift, and go to state 56

    $default  reduce using rule 48 (val)


State 32

   52 val: OBJ .

    $default  reduce using rule 52 (val)


State 33

   53 val: ARRAY .

    $default  reduce using rule 53 (val)


State 34

   54 val: STRING .

    $default  reduce using rule 54 (val)


State 35

   50 val: '-' . NUM

    NUM  shift, and go to state 57


State 36

   51 val: '(' . exp ')'

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 58
    val  go to state 38


State 37

   14 atr_id: ID ADD exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 14 (atr_id)


State 38

   47 exp: val .

    $default  reduce using rule 47 (exp)


State 39

   15 atr_recursiva: ID . '=' exp
   16              | ID . '=' atr_recursiva
   45 exp: ID . '.' ID
   46    | ID . '[' exp ']'
   48 val: ID .
   55    | ID . INC

    INC  shift, and go to state 54
    '='  shift, and go to state 63
    '.'  shift, and go to state 55
    '['  shift, and go to state 56

    $default  reduce using rule 48 (val)


State 40

   13 atr_id: ID '=' atr_recursiva .

    $default  reduce using rule 13 (atr_id)


State 41

   12 atr_id: ID '=' exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 12 (atr_id)


State 42

   19 prop: ID .
   20     | ID . '[' exp ']'

    '['  shift, and go to state 64

    $default  reduce using rule 19 (prop)


State 43

   17 atr_obj: ID '.' prop . '=' exp
   18        | ID '.' prop . ADD exp

    ADD  shift, and go to state 65
    '='  shift, and go to state 66


State 44

   21 atr_array: ID '[' exp . ']' '=' exp
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62
    ']'  shift, and go to state 67


State 45

   22 decl: ID '=' . exp fim_decl

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 68
    val  go to state 38


State 46

   24 fim_decl: ',' . decl

    ID  shift, and go to state 22

    decl  go to state 69


State 47

   23 decl: ID fim_decl .

    $default  reduce using rule 23 (decl)


State 48

   31 condicional: IF '(' condicao . ')' corpo ELSE corpo
   32            | IF '(' condicao . ')' corpo

    ')'  shift, and go to state 70


State 49

   36 condicao: exp . '>' exp
   37         | exp . '<' exp
   38         | exp . IGUAL exp
   39         | exp . DIF exp
   40         | exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    IGUAL  shift, and go to state 71
    DIF    shift, and go to state 72
    '+'    shift, and go to state 59
    '-'    shift, and go to state 60
    '*'    shift, and go to state 61
    '/'    shift, and go to state 62
    '>'    shift, and go to state 73
    '<'    shift, and go to state 74

    $default  reduce using rule 40 (condicao)


State 50

   28 while_loop: WHILE '(' condicao . ')' corpo

    ')'  shift, and go to state 75


State 51

   29 for_loop: FOR '(' LET . decl ';' condicao ';' atr ')' corpo

    ID  shift, and go to state 22

    decl  go to state 76


State 52

   30 for_loop: FOR '(' decl . ';' condicao ';' atr ')' corpo

    ';'  shift, and go to state 77


State 53

    2 cmds: cmd_1 ';' cmds .

    $default  reduce using rule 2 (cmds)


State 54

   55 val: ID INC .

    $default  reduce using rule 55 (val)


State 55

   45 exp: ID '.' . ID

    ID  shift, and go to state 78


State 56

   46 exp: ID '[' . exp ']'

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 79
    val  go to state 38


State 57

   50 val: '-' NUM .

    $default  reduce using rule 50 (val)


State 58

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   51 val: '(' exp . ')'

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62
    ')'  shift, and go to state 80


State 59

   41 exp: exp '+' . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 81
    val  go to state 38


State 60

   42 exp: exp '-' . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 82
    val  go to state 38


State 61

   43 exp: exp '*' . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 83
    val  go to state 38


State 62

   44 exp: exp '/' . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 84
    val  go to state 38


State 63

   15 atr_recursiva: ID '=' . exp
   16              | ID '=' . atr_recursiva

    NUM     shift, and go to state 30
    ID      shift, and go to state 39
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    atr_recursiva  go to state 85
    exp            go to state 86
    val            go to state 38


State 64

   20 prop: ID '[' . exp ']'

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 87
    val  go to state 38


State 65

   18 atr_obj: ID '.' prop ADD . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 88
    val  go to state 38


State 66

   17 atr_obj: ID '.' prop '=' . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 89
    val  go to state 38


State 67

   21 atr_array: ID '[' exp ']' . '=' exp

    '='  shift, and go to state 90


State 68

   22 decl: ID '=' exp . fim_decl
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62
    ','  shift, and go to state 46

    $default  reduce using rule 25 (fim_decl)

    fim_decl  go to state 91


State 69

   24 fim_decl: ',' decl .

    $default  reduce using rule 24 (fim_decl)


State 70

   31 condicional: IF '(' condicao ')' . corpo ELSE corpo
   32            | IF '(' condicao ')' . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 92

    cmd_1        go to state 93
    cmd_2        go to state 94
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 95


State 71

   38 condicao: exp IGUAL . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 96
    val  go to state 38


State 72

   39 condicao: exp DIF . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 97
    val  go to state 38


State 73

   36 condicao: exp '>' . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 98
    val  go to state 38


State 74

   37 condicao: exp '<' . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 99
    val  go to state 38


State 75

   28 while_loop: WHILE '(' condicao ')' . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 92

    cmd_1        go to state 93
    cmd_2        go to state 94
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 100


State 76

   29 for_loop: FOR '(' LET decl . ';' condicao ';' atr ')' corpo

    ';'  shift, and go to state 101


State 77

   30 for_loop: FOR '(' decl ';' . condicao ';' atr ')' corpo

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    condicao  go to state 102
    exp       go to state 49
    val       go to state 38


State 78

   45 exp: ID '.' ID .

    $default  reduce using rule 45 (exp)


State 79

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   46    | ID '[' exp . ']'

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62
    ']'  shift, and go to state 103


State 80

   51 val: '(' exp ')' .

    $default  reduce using rule 51 (val)


State 81

   41 exp: exp . '+' exp
   41    | exp '+' exp .
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 41 (exp)


State 82

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   42    | exp '-' exp .
   43    | exp . '*' exp
   44    | exp . '/' exp

    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 42 (exp)


State 83

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   43    | exp '*' exp .
   44    | exp . '/' exp

    $default  reduce using rule 43 (exp)


State 84

   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp
   44    | exp '/' exp .

    $default  reduce using rule 44 (exp)


State 85

   16 atr_recursiva: ID '=' atr_recursiva .

    $default  reduce using rule 16 (atr_recursiva)


State 86

   15 atr_recursiva: ID '=' exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 15 (atr_recursiva)


State 87

   20 prop: ID '[' exp . ']'
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62
    ']'  shift, and go to state 104


State 88

   18 atr_obj: ID '.' prop ADD exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 18 (atr_obj)


State 89

   17 atr_obj: ID '.' prop '=' exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 17 (atr_obj)


State 90

   21 atr_array: ID '[' exp ']' '=' . exp

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    exp  go to state 105
    val  go to state 38


State 91

   22 decl: ID '=' exp fim_decl .

    $default  reduce using rule 22 (decl)


State 92

   33 corpo: '{' . cmds '}'

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5

    $default  reduce using rule 4 (cmds)

    cmds         go to state 106
    cmd_1        go to state 8
    cmd_2        go to state 9
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17


State 93

   34 corpo: cmd_1 . ';'

    ';'  shift, and go to state 107


State 94

   35 corpo: cmd_2 .

    $default  reduce using rule 35 (corpo)


State 95

   31 condicional: IF '(' condicao ')' corpo . ELSE corpo
   32            | IF '(' condicao ')' corpo .

    ELSE  shift, and go to state 108

    $default  reduce using rule 32 (condicional)


State 96

   38 condicao: exp IGUAL exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 38 (condicao)


State 97

   39 condicao: exp DIF exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 39 (condicao)


State 98

   36 condicao: exp '>' exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 36 (condicao)


State 99

   37 condicao: exp '<' exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 37 (condicao)


State 100

   28 while_loop: WHILE '(' condicao ')' corpo .

    $default  reduce using rule 28 (while_loop)


State 101

   29 for_loop: FOR '(' LET decl ';' . condicao ';' atr ')' corpo

    NUM     shift, and go to state 30
    ID      shift, and go to state 31
    OBJ     shift, and go to state 32
    ARRAY   shift, and go to state 33
    STRING  shift, and go to state 34
    '-'     shift, and go to state 35
    '('     shift, and go to state 36

    condicao  go to state 109
    exp       go to state 49
    val       go to state 38


State 102

   30 for_loop: FOR '(' decl ';' condicao . ';' atr ')' corpo

    ';'  shift, and go to state 110


State 103

   46 exp: ID '[' exp ']' .

    $default  reduce using rule 46 (exp)


State 104

   20 prop: ID '[' exp ']' .

    $default  reduce using rule 20 (prop)


State 105

   21 atr_array: ID '[' exp ']' '=' exp .
   41 exp: exp . '+' exp
   42    | exp . '-' exp
   43    | exp . '*' exp
   44    | exp . '/' exp

    '+'  shift, and go to state 59
    '-'  shift, and go to state 60
    '*'  shift, and go to state 61
    '/'  shift, and go to state 62

    $default  reduce using rule 21 (atr_array)


State 106

   33 corpo: '{' cmds . '}'

    '}'  shift, and go to state 111


State 107

   34 corpo: cmd_1 ';' .

    $default  reduce using rule 34 (corpo)


State 108

   31 condicional: IF '(' condicao ')' corpo ELSE . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 92

    cmd_1        go to state 93
    cmd_2        go to state 94
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 112


State 109

   29 for_loop: FOR '(' LET decl ';' condicao . ';' atr ')' corpo

    ';'  shift, and go to state 113


State 110

   30 for_loop: FOR '(' decl ';' condicao ';' . atr ')' corpo

    ID  shift, and go to state 1

    atr        go to state 114
    atr_id     go to state 11
    atr_obj    go to state 12
    atr_array  go to state 13


State 111

   33 corpo: '{' cmds '}' .

    $default  reduce using rule 33 (corpo)


State 112

   31 condicional: IF '(' condicao ')' corpo ELSE corpo .

    $default  reduce using rule 31 (condicional)


State 113

   29 for_loop: FOR '(' LET decl ';' condicao ';' . atr ')' corpo

    ID  shift, and go to state 1

    atr        go to state 115
    atr_id     go to state 11
    atr_obj    go to state 12
    atr_array  go to state 13


State 114

   30 for_loop: FOR '(' decl ';' condicao ';' atr . ')' corpo

    ')'  shift, and go to state 116


State 115

   29 for_loop: FOR '(' LET decl ';' condicao ';' atr . ')' corpo

    ')'  shift, and go to state 117


State 116

   30 for_loop: FOR '(' decl ';' condicao ';' atr ')' . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 92

    cmd_1        go to state 93
    cmd_2        go to state 94
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 118


State 117

   29 for_loop: FOR '(' LET decl ';' condicao ';' atr ')' . corpo

    ID     shift, and go to state 1
    LET    shift, and go to state 2
    IF     shift, and go to state 3
    WHILE  shift, and go to state 4
    FOR    shift, and go to state 5
    '{'    shift, and go to state 92

    cmd_1        go to state 93
    cmd_2        go to state 94
    atr          go to state 10
    atr_id       go to state 11
    atr_obj      go to state 12
    atr_array    go to state 13
    loop         go to state 14
    while_loop   go to state 15
    for_loop     go to state 16
    condicional  go to state 17
    corpo        go to state 119


State 118

   30 for_loop: FOR '(' decl ';' condicao ';' atr ')' corpo .

    $default  reduce using rule 30 (for_loop)


State 119

   29 for_loop: FOR '(' LET decl ';' condicao ';' atr ')' corpo .

    $default  reduce using rule 29 (for_loop)
